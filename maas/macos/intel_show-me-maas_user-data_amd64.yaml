#cloud-config
merge_how:
 - name: list
   settings: [append]
 - name: dict
   settings: [no_replace, recurse_list]
final_message: 'MAAS Installed in $UPTIME'
manage_etc_hosts: false
prefer_fqdn_over_hostname: true
fqdn: maas.ubuntu-show.me
hostname: maas
timezone: America/Los_Angeles
locale: en_US.UTF-8
package_upgrade: true
packages: [git, jq, landscape-client, lynx, petname, postgresql, postgresql-client, postgresql-common, ssl-cert, tree]
apt:
  conf: |
    APT {
      Get {
        Assume-Yes "true";
        Fix-Broken "true";
        Auto-Remove "true";
        Purge "true";
      };
      Acquire {
        ForceIPv4 "true";
        Check-Date "false";
      };
    };
  primary:
    - arches: [amd64]
      uri: 'http://us-west-1.ec2.archive.ubuntu.com/ubuntu'
      search: ['http://us-west-1.ec2.archive.ubuntu.com/ubuntu', 'http://us-west-2.ec2.archive.ubuntu.com/ubuntu']
  security:
    - arches: [amd64]
      uri: 'http://us-west-1.ec2.archive.ubuntu.com/ubuntu'
      search: ['http://us-west-1.ec2.archive.ubuntu.com/ubuntu', 'http://us-west-2.ec2.archive.ubuntu.com/ubuntu']
  sources_list: |
    deb [arch=amd64] $PRIMARY $RELEASE main universe restricted multiverse
    deb [arch=amd64] $PRIMARY $RELEASE-updates main universe restricted multiverse
    deb [arch=amd64] $SECURITY $RELEASE-security main universe restricted multiverse
    deb [arch=amd64] $PRIMARY $RELEASE-backports main universe restricted multiverse
  sources:
    maas-ubuntu-3_2-focal.list:
      source: 'deb [arch=amd64]https://ppa.launchpadcontent.net/maas/3.2/ubuntu focal main'
      keyid: 3AB6DCF1F234E78DAA9C104204E7FDC5684D4A1C
ssh_pwauth: true
bootcmd:
  - ['cloud-init-per', 'once', 'net0', 'echo', 'network: {config: disabled}', '>', '/etc/cloud/cloud.cfg.d/99-disable-network-config.cfg']
  - |-
    cat <<-NETPLAN|sed -r 's/[ \t]+$//g;/^$/d'|tee 1>/dev/null /etc/netplan/50-cloud-init.yaml
    network:
      version: 2
      renderer: networkd
      ethernets:
        ens5:
          dhcp4: false
          dhcp6: false
          optional: false
          accept-ra: false
          link-local: [ ]
          match:
            macaddress: '$(ip -o l show dev ens5|grep -oP "(?<=ether )[^ ]+")'
          set-name: ens5
      bridges:
        br0:
          macaddress: '$(ip -o l show dev ens5|grep -oP "(?<=ether )[^ ]+")'
          interfaces: ['ens5']
          link-local: [ ]
          dhcp4: true
          dhcp4-overrides:
            use-dns: false
            use-hostname: false
            use-domains: false
          dhcp6: false
          optional: false
          accept-ra: false
          link-local: [ ]
          nameservers:
            addresses: [9.9.9.9,1.1.1.1]
            search: [ubuntu-show.me]
          parameters:
            priority: 0
            stp: false
    NETPLAN
  - ['cloud-init-per', 'once', 'net2', 'netplan', '--debug', 'generate']
  - ['cloud-init-per', 'once', 'net3', 'netplan', '--debug', 'apply']
  - ['cloud-init-per', 'once', 'net3', 'systemctl', 'restart', 'systemd-networkd', 'systemd-resolved', 'procps.service']
  - ['cloud-init-per', 'once', 'bc0', 'set', '-x']
  - ['cloud-init-per', 'once', 'bc1', 'export', 'DEBIAN_FRONTEND=noninteractive']
  - ['cloud-init-per', 'once', 'apt0', 'apt-get', 'update']
  - ['cloud-init-per', 'once', 'apt1', 'apt-get', 'upgrade', 'ubuntu-advantage-tools', '--option=Acquire::ForceIPv4=true', '--assume-yes', '--quiet', '--auto-remove', '--purge']
runcmd:
  - set -x
  - mkdir -p /opt/show-me
  - "chown -R $(id -un 1000):$(id -un 1000) /opt/show-me"
  - "echo 'precedence ::ffff:0:0/96  100'|tee 1>/dev/null -a /etc/gai.conf"
  - export DEFAULT_IP=$(ip -o -4 a show $(ip -o r l default|grep -vE '10\.10\.1[0-9]\.'|grep -m1 -oP "(?<=dev )[^ ]+")|grep -m1 -oP "(?<=inet )[^/]+")
  - sed -i -r "s/127.0.1.1/$DEFAULT_IP/;/localhost/a ${DEFAULT_IP}\t$(hostname -f) $(hostname -s)" /etc/hosts
  - systemctl restart systemd-networkd systemd-resolved procps.service
  - export DEBIAN_FRONTEND=noninteractive
  - echo "IyEvYmluL2Jhc2gKW1sgJChkcGtnIC1sIHBldG5hbWV8YXdrICcvJyR7aX0nL3twcmludCAkMX0nKSA9IGlpIF1dIHx8IHsgc3VkbyBhcHQgaW5zdGFsbCBwZXRuYW1lIC15cWY7IH0Kc3VkbyBta2RpciAtcCAvdXNyL2xvY2FsL3NoYXJlL3BldG5hbWUyCmZvciBYIGluIG5hbWVzIGFkamVjdGl2ZXMgYWR2ZXJicztkbwogIGZvciBZIGluIHggYiBmIGkgajtkbwogICAgZ3JlcCAtUkVJICdeJyR7WX0nJyAvdXNyL3NoYXJlL3BldG5hbWV8YXdrIC1GJzonICcvJyR7WH0nL3twcmludCAkTkZ9J3xzb3J0IC11Vnx0ZWUgMT4vZGV2L251bGwgL3Vzci9sb2NhbC9zaGFyZS9wZXRuYW1lMi8ke1l9LSR7WH0udHh0CiAgZG9uZQpkb25lCnN1ZG8gY2hvd24gLVIgcm9vdDpyb290IC91c3IvbG9jYWwvc2hhcmUvcGV0bmFtZTIKc3VkbyBjaG1vZCAtUiAwNjQ0IC91c3IvbG9jYWwvc2hhcmUvcGV0bmFtZTIvCnN1ZG8gY2htb2QgNzU1IC91c3IvbG9jYWwvc2hhcmUvcGV0bmFtZTIKZXhpdCAwCgo="|base64 -d|tee 1>/dev/null /usr/local/bin/petname-helper.sh
  - "chown root:root /usr/local/bin/petname-helper.sh"
  - chmod 0755 /usr/local/bin/petname-helper.sh
  - echo "IyEvYmluL2Jhc2gKW1sgLW4gJHsxfSAmJiAkezEsLH0gPX4gLWggXV0gJiYgeyBwcmludGYgIiR7MCMjKi99IFsjIG9mIGluc3RhbmNlcyBwZXIgcmVsZWFzZSAoaXByKV1cblxuRGVmYXVsdCBpcHIgPSAzXG5cbiI7ZXhpdCAyOyB9CltbIC1uICR7MX0gJiYgJHsxfSA9fiBeWzAtOV0rJCBdXSAmJiB7IGV4cG9ydCBNQVhJPSR7MX07IH0KW1sgJHtNQVhJfSAtZ3QgMTAgXV0gJiYgeyBwcmludGYgIkRlZmF1bHRpbmcgdG8gc2FmZSBtYXggaW5zdGFuY2VzIHBlciByZWxlYXNlIG9mIDEwXG4iOyB9IHx8IHsgcHJpbnRmICJTZXR0aW5nIGluc3RhbmNlcyBwZXIgcmVsZWFzZSB0byAke01BWEl9XG4iOyB9CltbIC16ICR7TUFYSX0gXV0gJiYgeyBleHBvcnQgTUFYST0zO3ByaW50ZiAiRGVmYXVsdGluZyB0byAke01BWEl9IGluc3RhbmNlcyBwZXIgcmVsZWFzZVxuIjsgfQpmb3IgWCBpbiAkKGx4YyBpbWFnZSBsaXN0IC1jZmx8YXdrICcvXlx8LyYmIS9GSU4ve3ByaW50ICQyIjoiJDR9Jyk7ZG8KICBleHBvcnQgQT0ke1gjIyo6fSBJPSR7WCUlOip9CiAgW1sgJHtBfSA9IHgtbWluIF1dICYmIGV4cG9ydCBSPVhlbmlhbDsKICBbWyAke0F9ID0gYi1taW4gXV0gJiYgZXhwb3J0IFI9QmlvbmljOwogIFtbICR7QX0gPSBmLW1pbiBdXSAmJiBleHBvcnQgUj1Gb2NhbDsKICBbWyAke0F9ID0gaS1taW4gXV0gJiYgZXhwb3J0IFI9SW1waXNoOwogIFtbICR7QX0gPSBqLW1pbiBdXSAmJiBleHBvcnQgUj1KYW1teTsKZGVjbGFyZSAtYWcgTkFNRVM9KCQoY2F0IC91c3IvbG9jYWwvc2hhcmUvcGV0bmFtZTIvJHtBJS0qfS1uYW1lcy50eHQpKQpkZWNsYXJlIC1hZyBBRFZFUkJTPSgkKGNhdCAvdXNyL2xvY2FsL3NoYXJlL3BldG5hbWUyLyR7QSUtKn0tYWR2ZXJicy50eHQpKQpkZWNsYXJlIC1hZyBBREpFQ1RJVkVTPSgkKGNhdCAvdXNyL2xvY2FsL3NoYXJlL3BldG5hbWUyLyR7QSUtKn0tYWRqZWN0aXZlcy50eHQpKQogIGZvciBZIGluICQoc2VxIDEgMSAkTUFYSSk7ZG8KICAgIFtbICR7WX0gPSAxIF1dICYmIGV4cG9ydCBXPXN0OwogICAgW1sgJHtZfSA9IDIgXV0gJiYgZXhwb3J0IFc9bmQ7CiAgICBbWyAke1l9ID0gMyBdXSAmJiBleHBvcnQgVz1yZDsKICAgIFtbICR7WX0gLWdlIDQgJiYgJHtZfSAtbGUgMTAgXV0gJiYgVz10aDsKICAgIGV4cG9ydCBOQU1FPSIke0FEVkVSQlNbJFJBTkRPTSAlICR7I0FEVkVSQlNbQF19XX0tJHtBREpFQ1RJVkVTWyRSQU5ET00gJSAkeyNBREpFQ1RJVkVTW0BdfV19LSR7TkFNRVNbJFJBTkRPTSAlICR7I05BTUVTW0BdfV19LSR7UiwsfSIKICAgIHByaW50ZiAiTGF1bmNoaW5nICR7WX0ke1d9IGluc3RhbmNlIG9mICR7Un0gYXMgJHtOQU1FfVxuIjsKICAgICgobHhjIGxhdW5jaCAkSSAke05BTUV9IC1wIGxhbmRzY2FwZS1jbGllbnQgJj4+L3RtcC9hZGQtY2xpZW50cy5sb2cpICYpCiAgICB1bnNldCBYIFkgTkFNRQogIGRvbmUKZG9uZQpleGl0IDAK"|base64 -d|tee 1>/dev/null /usr/local/bin/add-clients.sh
  - "chown root:root /usr/local/bin/add-clients.sh"
  - chmod 0755 /usr/local/bin/add-clients.sh
  - echo "W1VuaXRdCkRlc2NyaXB0aW9uPVNpbXBsZSBXZWIgc2VydmVyIGZvciB1c2Ugd2l0aCBVYnVudHUgZGVtb3MKQWZ0ZXI9c3lzbG9nLnRhcmdldApBZnRlcj1uZXR3b3JrLnRhcmdldApDb25kaXRpb25QYXRoRXhpc3RzPS9ldGMvc2hvdy1tZS93d3cvCgpbU2VydmljZV0KVHlwZT1zaW1wbGUKV29ya2luZ0RpcmVjdG9yeT0vZXRjL3Nob3ctbWUvd3d3LwpFeGVjU3RhcnRQcmU9LS91c3IvYmluL3RvdWNoIC9ldGMvc2hvdy1tZS9sb2cvaHR0cC5sb2cKRXhlY1N0YXJ0PS9iaW4vYmFzaCAtYyAnY2QgL2V0Yy9zaG93LW1lL3d3dy87ZXhlYyBweXRob24zIC1tIGh0dHAuc2VydmVyIDk5OTkgJj4vZXRjL3Nob3ctbWUvbG9nL2h0dHAubG9nJwpSZXN0YXJ0U2VjPTUKUmVzdGFydD1hbHdheXMKCltJbnN0YWxsXQpXYW50ZWRCeT1tdWx0aS11c2VyLnRhcmdldAo="|base64 -d|tee 1>/dev/null /etc/systemd/system/show-me-files.service
  - "chown root:root /etc/systemd/system/show-me-files.service"
  - chmod 0644 /etc/systemd/system/show-me-files.service
  - echo "LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJGd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFRRUE3dUo2RytncHQrWTlBcTNiblExeGtveHM3dkx0WVNZbVlucUJJdTJKT2h1clJnbFBwbFQ2CmVEY3V5dTFSTXdJL3h5eHpJTEJ4U0NnNmlVV0dxTzFqNGwyaG5rWDdoaW9OaGJSc0RaUVpSNUlMcGFna3NNNUh0dTliRUYKbVpNbUczYVFjRjVaQW9tcHI5THBNZ3U2U1YyQkRYT1RLNHZ6akdCWVh5ZmQ0MkZESXRDUlFCUlBzZDFmUkRGTEkvQlFTWQpKbUpRVVVSTzNVSkZib29VWjQrQk5teWdTVU1SZGUwQUZHaHBrRUh2ODA5Vk0za0gzOWd1S0I2d24wS1luZ21tZHVZWk1RCndBejdHYUNZa1JVNWo3c3VzYXVLaE95ZUFEUGhFWmhaNkVsWHhOdnNoMTEyNlJtZ3JTUlA0aTQrSEplKzRXMHRkNGxUUSsKM011a2dYVTI3d0FBQThneFpWZ0lNV1ZZQ0FBQUFBZHpjMmd0Y25OaEFBQUJBUUR1NG5vYjZDbTM1ajBDcmR1ZERYR1NqRwp6dTh1MWhKaVppZW9FaTdZazZHNnRHQ1UrbVZQcDROeTdLN1ZFekFqL0hMSE1nc0hGSUtEcUpSWWFvN1dQaVhhR2VSZnVHCktnMkZ0R3dObEJsSGtndWxxQ1N3emtlMjcxc1FXWmt5WWJkcEJ3WGxrQ2lhbXYwdWt5QzdwSlhZRU5jNU1yaS9PTVlGaGYKSjkzallVTWkwSkZBRkUreDNWOUVNVXNqOEZCSmdtWWxCUlJFN2RRa1Z1aWhSbmo0RTJiS0JKUXhGMTdRQVVhR21RUWUvegpUMVV6ZVFmZjJDNG9IckNmUXBpZUNhWjI1aGt4REFEUHNab0ppUkZUbVB1eTZ4cTRxRTdKNEFNK0VSbUZub1NWZkUyK3lIClhYYnBHYUN0SkUvaUxqNGNsNzdoYlMxM2lWTkQ3Y3k2U0JkVGJ2QUFBQUF3RUFBUUFBQVFBRHNWcGZTS3JJYmhXZXdudDQKSHZRdVpua2ZiQmxYNldxUVNjSHA0OCtLV3JlK1lsSGRNQlRvVlFrLzE1NVNhOWRoSjd3TkV3T1ZTa1hwWVNGRHJRMWdpQwpYT2l6OW9DZ25JRXo2aGtSclNpWU1nWVZqdkRZK3ZQbDNKdGpkRVdUYjA2c2Y1MnMxWGZCamZRQ1RMNVB4V3oyeWl0SjhmCkdaK3RPeTVhd3NJZmRGOFJDVml2NFVzaThtNndXL2VMdmhLODFqS3JaZEtCUzNycXRGcWRaZ1M3MlBwWU9OeDdOakxCSTIKazZ3K2ZDUVJ4Y3d6V0ExdTdaR1d6UTMyeWRlZlNtWGE4U3BjZ25RUHhTVGtGQmpQY28rbTdNTW5BZlVMTjRBT2J3b3NNNgpLNHNKUVN4bG95TjU4VHlHQmEvSGJsQ3NxcXN1S2tEMCt4Yjlwd0lCMHNDRkFBQUFnQjMrTHR6dG1sdFQzQmF2eWsrS2VxCld2RmFLZkpBQzdkZG9LQzkrQ05JaXpYYmxITXozT1hhK215czl2Qkw2aEF6d0Ixd011RGIxVWhEWU4xeEZKRG50UW9pNHgKeTdLL3NGOTVzYVlsejQ2YzIxVnVvWktSK0V1ZEtCeFFDTmhMREJUQWhhSkJmWjU0ZVZWTjJGUnFIc3pMS1pJMW00bitTOQpJOVR0MHVDSDJnQUFBQWdRRDZEaEZsd1pSc3Z6aFQvNU1zRXJ3MzkrV3hKNVlGVXlvc082TDlIV0RGRzVEdkNqMEdxN0FxCmtkRHVYZ0FndkN4T08rK3RKZjlpK1c4c3FLcXJ0c2JPUnFFb2xtb1NvbjREd0VaQ2l1ZmdGS2tQa1J4d0I5ZGFNNndXSS8Kd1JucUVqSGVSdHlFOWFDNVpuczVqdmY1WEw1S3BpZ0tPTmpKa0thdG81NkJTbFN3QUFBSUVBOUpCc0gvRDQ2MHhjM09xTgo1d2JMMnUrTzNVWnA2S0RxYnpmaldLVzVRRXVtVFE0QUUrcytmQ3pQOExQNnE5TGdrTXBwMDgxNHY5cUw5VXVRR0ZjdlRoCkFYNXBidDhIRVc0MEgyMVdjc1pIdWRzMEx0enN5OThhbVlzOW12MDJIbkt1NnFqb214V0JVY0lwWkxnSHVsbDgvaG42UisKeU5ZQmhxOVkwOGs0d20wQUFBQVRaR1Z0YjBCMVluVnVkSFV0YzJodmR5NXRaUT09Ci0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLQo="|base64 -d|tee 1>/dev/null /home/$(id -un 1000)/.ssh/id_rsa
  - "chown $(id -un 1000):$(id -un 1000) /home/$(id -un 1000)/.ssh/id_rsa"
  - chmod 0400 /home/$(id -un 1000)/.ssh/id_rsa
  - echo "c3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCQVFEdTRub2I2Q20zNWowQ3JkdWREWEdTakd6dTh1MWhKaVppZW9FaTdZazZHNnRHQ1UrbVZQcDROeTdLN1ZFekFqL0hMSE1nc0hGSUtEcUpSWWFvN1dQaVhhR2VSZnVHS2cyRnRHd05sQmxIa2d1bHFDU3d6a2UyNzFzUVdaa3lZYmRwQndYbGtDaWFtdjB1a3lDN3BKWFlFTmM1TXJpL09NWUZoZko5M2pZVU1pMEpGQUZFK3gzVjlFTVVzajhGQkpnbVlsQlJSRTdkUWtWdWloUm5qNEUyYktCSlF4RjE3UUFVYUdtUVFlL3pUMVV6ZVFmZjJDNG9IckNmUXBpZUNhWjI1aGt4REFEUHNab0ppUkZUbVB1eTZ4cTRxRTdKNEFNK0VSbUZub1NWZkUyK3lIWFhicEdhQ3RKRS9pTGo0Y2w3N2hiUzEzaVZORDdjeTZTQmRUYnYgZGVtb0B1YnVudHUtc2hvdy5tZQo="|base64 -d|tee 1>/dev/null /home/$(id -un 1000)/.ssh/id_rsa.pub
  - chmod 0640 /home/$(id -un 1000)/.ssh/id_rsa.pub
  - "chown $(id -un 1000):$(id -un 1000) /home/$(id -un 1000)/.ssh/id_rsa.pub"
  - echo "a2V5IGEKa2V5IGQKa2V5IG0Ka2V5IGkKa2V5IG4Ka2V5IGkKa2V5IHMKa2V5IHQKa2V5IHIKa2V5IGEKa2V5IHQKa2V5IG8Ka2V5IHIKa2V5IDx0YWI+CmtleSBsCmtleSBhCmtleSBuCmtleSBkCmtleSBzCmtleSBjCmtleSBhCmtleSBwCmtleSBlCmtleSAtCmtleSBhCmtleSBkCmtleSBtCmtleSBpCmtleSBuCmtleSBACmtleSB1CmtleSBiCmtleSB1CmtleSBuCmtleSB0CmtleSB1CmtleSAtCmtleSBzCmtleSBoCmtleSBvCmtleSB3CmtleSAuCmtleSBtCmtleSBlCmtleSA8dGFiPgprZXkgdQprZXkgYgprZXkgdQprZXkgbgprZXkgdAprZXkgdQprZXkgPHRhYj4Ka2V5IHUKa2V5IGIKa2V5IHUKa2V5IG4Ka2V5IHQKa2V5IHUKa2V5IDx0YWI+CmtleSBSaWdodCBBcnJvdwprZXkgXkoKa2V5IF5KCmtleSBxCmtleSB5Cg=="|base64 -d|tee 1>/dev/null /home/$(id -un 1000)/maas.lynx
  - "chown $(id -un 1000):$(id -un 1000) /home/$(id -un 1000)/maas.lynx"
  - chmod 0644 /home/$(id -un 1000)/maas.lynx
  - echo ""|base64 -d|tee 1>/dev/null /usr/local/bin/show-me-maas_lxd-preseed.sh
  - "chown root:root /usr/local/bin/show-me-maas_lxd-preseed.sh"
  - chmod 0755 /usr/local/bin/show-me-maas_lxd-preseed.sh
  - echo ""|base64 -d|tee 1>/dev/null /etc/ssl/certs/show-me_host.pem
  - chmod 0644 /etc/ssl/certs/show-me_host.pem
  - "chown root:root /etc/ssl/certs/show-me_host.pem"
  - echo "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1N3d2dna29BZ0VBQW9JQ0FRQ2crQmVpdnFWRk1yS28KaGJ6VjdZWXBmdXZoSlZxSnExb0ZtcG13UlRuMTd1Z0VsZHdkcTNoUmliNU1zN1RTSXhJeEEzUWxBM1dUQkhuYgpPYmcwc3J5bTJZaG1hVFFaYk5KSmRpZEkwRGJCSFdldlphbEZkWHVqV3JNclFaM1oxczZnem9ZUm9BaTc2L1o5CnkzamFHMU50UWptditRV20yM0F5SnZRd3B1UVRXMU9vRGlrb0U4L1JEdit4bzBGc0NqNk83RmRUQXpTaFYzOGIKL2FaN2loVVJYa3FDQW5OeVVZeEMzcTNVSGg0ZFo5aVhxRkJlOFcwY2ZvZWtKZkQ2aTVQTUtPZVZVL1h3U0phQwpQUm1ReWVBSFpNZWpYb01zZUpCbURhNGQ5VmlEaGFLOHc4YWJlSlN1TDdDQ3I5K3M3OTBKa3FhM3ZNYjRvWkVMCm1CQytOcWxFZkZUOGZRWFRxN0lDditiLzVId3p5cWxEWUNpYWtlcnJDdjNod2hFeXdDVHlybnNzdVNPOGpYb2MKYUduUjczTnM1TzdLdkdheDBpczNaekRCdHZORDd5UmZYVzFoRExURUxoNC9Ed0tBUWV0bmdmL2ZPT290ZDc5ZwozMWV0OGdqaDJtYmxGRDR3SUd4UDVBT1hOKzRXYUJ2ZjZsbVEva3hBU3ZKYmY5aWJQOW53b2JSSHBFTFNCTVFECmdvS3R2QnlUdDMwMVZyT0NCVXdhK3NmYmpUZ00zQnpSZG01ZDQ4ZnIvNVdkaGxVN2dlTUxCWENxeGFsYmRuLzcKN215TU1YeHZoTGR0YW9zUWJ2b2o1ZDlsd2tENm9rM3dUcDJUMytneHZia1AxSjZpM0p4eWZGWWpTNyt6YUt6ZgpwRHBOMmtsTVE0QmdyVis1aTJaaHIrSnVITVczMXdJREFRQUJBb0lDQUFKdXRBNDBxR3FrUUZwUVE2OXZYNUJtCkxJVTU2TWIvQXFVY0k1K0RrcHNZMGF1a2ZVQnQxNnQ3SVdpblF4STRzTjl5UTJvU01jSXllMmhsVkR4YXlVM08KbEUySTdkRGE5bmNRVFRNeWp4Ly9ETHMrTVBUN0pDbWFZZnRyd0M2Qk1TUEpHbEJ3dzRZVHFwNmFFc1dHUGlKQwpUSmZkcVZtejJlSkNxRWFUbnAreVFocUFHZmNQb0wwOG5UdmNDbll0YWpDbFpXSEoxVGU5L1VyNUVib05NRE83CjloeWtkdjgvaVZPNXJTS0ZRMXZRM3hscWllVUNjcFhJbm9yTHo2bzhoY1pERElGQi9WeXFvTVh2TjFPYklqSGUKbmtvQW9TeHpYUUhGeWd0SllIOUhDU1NMUVk1bk0rOVcyek9JREhqTVRWUnh1cklDL2U5NFJMWlh2cUxydkVZcApSMUhOa3U4S0NuNHo2cnVNSHQxNTViVTBYRS8vQUUwdmw1YjdkcFhmWTFzd1owc2lqTHNvdVZ4VDFDOXpBdGI4CmE2UDZ4akhGNm1scktMQzhLelhBQkJ3bXk5cmZzR3EwKzQ5OS9DOE9xV0NrUE1YRWVMaGU4OWZ6TW1wakE4MEMKQlFrNlMwbGZpUlNWYTJRSVlqcnVObEJNVjJ2SVExZXhDc3RQOVZ2UHFzZlE2eHZISHZxdkptNmZwL3I0Q1N6cAoyQ3N0ejdIZ2dPSmhnYmJwSjJxMU5WNGJkT0VVSHJCMWI3d2R6bG1YNTRRcHZFQllzVm1MUm1WZlN5UW1aZnY2ClBCK1FvY2NMT0dhSVpsUHBqZ21VUmF1djNvbjRxdWpST0VyZFhLVXpPT1dHUkFvWmswSnFmQ0tMWVdrRTJWREIKSk1Wc1l4M2I4VHVPZEtEaWRkSEJBb0lCQVFDOTFybWxaZ3BSVTJCQTdLM2ozQ0FyVktQVUd5MmdhMjZ1RWJPcApEcm9oRm82Y3gwRzN5ZWJnS3h3elJ5VnRkR05kamJrVHpONGVXUE5WTnZxN2JkVEprZ3Y2NEplbTlMaWxRT1JICkI1OWVJNjFCeTR6RXFrNlFwTnI2aitXOTdEaGVMM1R5U2lkUlZJVEhiRmJkYnorZFBKZlYrY1phcGthUGZpQmUKRVlWbFNKdmlNOUpjYTloWHBjTUJFakh1VFY1OEZnd1lFWWdVMXNtZ3F1aHZjbk1ySmsvTGljZldGY0FFTHdNaApmZDY5S0RPbFFCOEhWcXRpUDBaTzQ1TStJQzJOTzhCaGYvNU9Fc2l5MFlrNVFZNHVWZzV0eXZlQXFtbTVtZWs4CjhITlJhNTN4bkZHQ283ZVVpM3FyZ3ltUEhDaFArK3JXK2dqN0J2YWpmSGRiZlltWEFvSUJBUURaRWFNdjNlS0gKYUdOR3JTQ2xxN1lSTmtId3BwdXlvSGE1VlBRMi9BdGRvYWNhTHVzYlpnRSt5Rm9EYVpEcDNVVXBIOTJCVWFCTgpHbElIK1puQk94cDIrUk5aZzdWKzFMSjg5MFdpUnBEeUNPWXQybG0xNWE2NjZjMGMwOGZPZk9tQXNlTklSbXJrCnBnbXBPN0FjQ05zdWNHZCtrcnpncy9CekNiRjFRd29pRmhnQkhrRG81ZlVORkNrN1ViSnVVMTRBVjYzbVBUZE8KNUVHY3BQemd3QUtuOVE2K1J0K3ZOdHIrRkIyTXgrWWtLVnUrRi9leG5OemE3ZjVMR1ROdmVOY01pY0xrMk1uaQoyRTRJb3JINWk0L28wYWZqekZpWHNVSWl5VkNaWHlVRGUzY1VwUG9wdkNVZVBONTg5akY4SGFVTnVrL3lmUGpyCnd2UUh0OHlIZEl2QkFvSUJBQkVKQ01XLzMyTW00VGRTUmRSeHQyMUwvaHVWaU1XaGZtQWVkSW5TS1grNG4zbVEKSStTVE9LV2JHTCs5UGEyUnlTem0vOW00QTZLamhzcDUwWXdxTWZNWXFQeU5WTzZGZldCTzcyMDBVT2ZJdWM1eQpycUlqU2tPT2w1dnVkOFpRUVVxcVpZc3NmbFM5Q2VFL1pwZ2VXSTRLbHZGN3BZSVM4N2dDc0hMZ2phRG1JQjd2CldZd3puVWxZTmFTTjltOFZBRXFRUyt1SS96WW5oQlpuMzgzSWJtOUwwOU5HL09qSU1OL3ZQQSt3Vk9HU2p2ZmcKUmlpSmJYMjJnZCtvYWxrajJCS1pidzBReUVoSFJUMU9za3F5Q0VrK0xiTktpR1ZDWlpSakxGdnNrOXlWbEtuTwp4ajI3NVVodUw4YmVVVWRuVm5LKy8zYmxIeE12cjhoQjdoQUd0dWNDZ2dFQWF4eWo3TlBObTBtc2EweTA1bXRUCjNTeHIzMmNuUHo2bE54Q3ZyWTR6d1pFcUZ1WitCemdQZHo2QUJGME1NQXFLdlI5SE95L2ZMUXpHMjc2VDIyRGgKejBGYkJmblREbkhBWFovYTBaZUdvSmc1bFBqQStkd0xtNW9SSjU5dFlmd0xjUURXaVd5T0JLUFY4cGRNY0prQwpKdWs2ZUovSjZndUFwQk50YU5LYTVuVUdoVTY3Y3ZFK09hVHdMNkJCcnVVZVpvYmRmZFpKTzNtdzBxNHJSbkFaCkgyM3lSM3hMbG5jNEd0WXNPckxOWXB5eDg1eDZFais0VDZQT3Jwb1I0bmk3alNsUmJZRjRKYUxjNXEvNXFJencKaDA4bFRHZ2ljei81eFphWFdnYzBDWUxjSU9qRHRPSnRZbjFnd0VMdjZqSHFwMXAvWnNXNlF3UWhUTW1xZUZEUApRUUtDQVFFQXV3VGxjQVdyYVZiYlh5ejhuNUhncmVkSHlqcUVFbm1iRUVvR2Z5YnllbEljSFZzTE42TlVZWXZNCmd4WHlvaUZWVUlISVdGcnNkdlo0cWpzWDNUbmthK2NaTzMyczc2QzBUa1JWb24yWjVZd3ZoZkhZVGZnUEtReFIKMjJOZVJrT3pEb3l0K2ZMMk5vNDNsR1N2TFhTVVVtV05oZ2s2NmNDUFlTT0hlZDZUdklHUEJoV1JkUEhSZ1VmbwpkTW9XMEJ2QkswbHB4YWhRblVQcWliRVRvZHVuK3VhSnRNeThWVUZtRzBUK0VHeWdwMS9GSitHLzVPK3k0ZDE2CkNFVCtQOWkwaHZjK1h5RmZwY1BrbkJtWFV6OG5VZXZxQ0hSeTlEQ2VRdzVOVEFaQzNWK3kzeFQ0QlE0TExneGQKdVdPajRjelFSbFdBaUhaRVFJSkZ5ODgyN3FKM3V3PT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo="|base64 -d|tee 1>/dev/null /etc/ssl/private/show-me_host.key
  - chmod 0644 /etc/ssl/private/show-me_host.key
  - "chown root:root /etc/ssl/private/show-me_host.key"
  - echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUY5VENDQTkyZ0F3SUJBZ0lVSDJEWnErcEZsNWZSM0V1L0VHamRGbXBJNEQ4d0RRWUpLb1pJaHZjTkFRRUwKQlFBd2dZZ3hDekFKQmdOVkJBWVRBa2RDTVJBd0RnWURWUVFJREFkRmJtZHNZVzVrTVE4d0RRWURWUVFIREFaTQpiMjVrYjI0eEZ6QVZCZ05WQkFvTURrTmhibTl1YVdOaGJDQk1kR1F1TVNZd0pBWURWUVFMREIxRVlYUmhJRU5sCmJuUmxjaUJHYVdWc1pDQkZibWRwYm1WbGNtbHVaekVWTUJNR0ExVUVBd3dNUTJGdWIyNXBZMkZzSUVOQk1DQVgKRFRJeU1ETXpNREF4TkRneU1sb1lEekl3TlRNd09USXlNREUwT0RJeVdqQ0JpREVMTUFrR0ExVUVCaE1DUjBJeApFREFPQmdOVkJBZ01CMFZ1WjJ4aGJtUXhEekFOQmdOVkJBY01Ca3h2Ym1SdmJqRVhNQlVHQTFVRUNnd09RMkZ1CmIyNXBZMkZzSUV4MFpDNHhKakFrQmdOVkJBc01IVVJoZEdFZ1EyVnVkR1Z5SUVacFpXeGtJRVZ1WjJsdVpXVnkKYVc1bk1SVXdFd1lEVlFRRERBeERZVzV2Ym1sallXd2dRMEV3Z2dJaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQwpEd0F3Z2dJS0FvSUNBUUNkZWl2VDZrbWJHWnl1UjdENkxmaVdlMTJtRE1oMTVZb2Ftcm5sVjRFUkZ5UTQ4WHJWCnBBVGxKNHVrWHJudHphT3NkQXpFTzh3U0FwNlc0UWFRVFc0eHJ3TVRob2I0c3lQSXlibjRQK3VhL3VhUWxmZFoKU00za2NpTXFkWEZmL0pQQWlVK0VQajErSmVjTzFpcTNKamt2YXZ2TWFzcCtja2JJTkR3SmN2Z0R5UVBCMWM5WgpTZkRTMmZTL1k1S2ZSdjhIUytQRElKWmxXaVZ5QTNmQXhXMXpJem1zdlF0UkJoVjV5Rkt2dThQUloxQVJTVkxqCjYwblAvbXlzd3ErWUsyNnVjZGVNNEJhdlB0NERoSWVpckl3MFlDUjkvR0cyTEJtQlJ0Ny8xQXZsV3pRNFZKSVYKUks1ckx1RFRtUEdCV2xGdnF4emV2Wm1ESkRnS0wvWDlDWHFZUGhydkF2L1A4bEJ6eTVkTjNKZFNPN0orMFdnNAo4WjRsamNVOGlyUkZDN2RVVk1ad3BEU1JqVXpWcUVnL2FzallYU0hMVVl4NE9XTm9kdkhxd2hrUXlCNjcwME4wCkRLSDZCYXdGdGE2L3c4N2QrN0FUV0hSOC9MUGI2TEdncm9jcUp6eWwxVE9sM2pUcXVxL2gxRHJCbDlHU2tpUnAKZVBBM29rcmJ2ZkxjVlU2aXg5OVY2eTZSYVdLVG1rNDd5ZlhqcWhFeUFzSWU2WGRWQ0MyVkVjMDlVd2VMRGd4MwpzTzhYZTFSTHBQUlRVaTF6Nzk2Y2RxWXIyRXRKckZWUzVaTVh6a1h2MXJwejQ4TnU4aGtHOWFqSloxSzduTkcxCi9HaGtGcmYyNHRIeFdFcnkrNi9vNlN3M0JSMW1QNUtVMkh5ZlUvV2VYVE16U3pGay8rOWR0NFhpTXdJREFRQUIKbzFNd1VUQWRCZ05WSFE0RUZnUVVUT2NpZkp2NEt4R2ljMGgxRzV4SEZkWEV2eWN3SHdZRFZSMGpCQmd3Rm9BVQpUT2NpZkp2NEt4R2ljMGgxRzV4SEZkWEV2eWN3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFOQmdrcWhraUc5dzBCCkFRc0ZBQU9DQWdFQWJuUzUveGhXeFk2aGJMYnBvTW5oVmdyckp6UHluU1J3WDZmbXBidDFpN0R2bjJGSVRmWUsKZW5jeGdVd2dQTGRsOG4zbHNFdW82MDkwZk5yVFpnT3Zpak52a2czTEUvSzlWSVUrYy82QVFycDdoMTVyd0tsQQpYZ1JwcE1uSHNFeTZMVkxKSGhrbG93MCsxYVBjbWlYcStyUW5ubFVkci90cmNoOEdYcHgyanFNdytrVU5VenZwCkJHM2tCWUtiV2RteCt4cmhmTGRGRVA3NDRPSDhsSFh3dGpVM2k4OXUrcUxRNVZmb0hIQlU2bGkyVyszNjEzalkKa2RNL3JQUk9qTWxrWUxQUmN1TXBzc3NsdmgwMWg1V095ang3Z1NmVCtacVN6L2pMaGtLSTZVajJNUnhGZmNtdQp0K09kcnVETzViLzFuNzR4Rmt6RjIvSlhNdkFHcmt1MzRSZWtvWE5iQlRnaVU4T3FkYUJJUDA0ZEkvYlJhanV2CkZhejkzWTh1bWZTb2dnd2NJbTlEczQ0REZKRm1uZk4yaWQ0c0V2YnU4Nkk0UHgrdW11K1RjV21mS2wzVzg1bFkKNEdxVDF4OWRlNFNoUkFxZStzOElLbUl0S2FSS1p1aXRMYW9USmc4TldrSkM1ellZV3pwcEQ3c2d2dkg1eTZ0QwptOTd3YW1FQVR3WDd1NWl5bVBZdFRub0dTRU9oc2czdnEwSGJyR2Jpb3RxTUJoNWRseUlzMjV4T1ZxQ0I5aG8vCjVtY1NVNlltU2FhOEY0NklNbC9MU3JXY29WRVAyMDZiTWF2ZExmZHVxZmJOaEN4ZDRMbGhnb01EWWxWQnZtMjkKRkpvZ3NhSUsrNjFuNm8rSUJ6WVZJc1BaaGlSdGFVVHZjZk5NdGN1UWMvMUlodUQvVlhhR1pydz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="|base64 -d|tee 1>/dev/null /etc/ssl/certs/show-me_ca.crt
  - chmod 0644 /etc/ssl/certs/show-me_ca.crt
  - "chown root:root /etc/ssl/certs/show-me_ca.crt"
  - cp -a /etc/ssl/certs/show-me_ca.crt /usr/local/share/ca-certificates/
  - "apt-get -o Acquire::ForceIPv4=true update"
  - if $(test -n "$(command 2>/dev/null -v lxd.lxc)");then su - $(id -un 1000) -c 'sudo snap refresh lxd --channel latest/stable';else su - $(id -un 1000) -c 'sudo snap install lxd';fi
  - snap restart snapd
  - if [ -f /etc/default/crda ];then sed -r -i 's/^s*REGDOMAIN=S*/REGDOMAIN=US/' /etc/default/crda;fi
  - for GROUP in docker kvm libvirt libvirt-qemu lxd landscape;do if [ "$(getent group $GROUP;echo $?)" = "0" ];then usermod -a -G $GROUP $(id -un 1000);fi;done
  - update-ca-certificates --fresh --verbose
  - mkdir -p /etc/show-me/www /etc/show-me/log
  - if ! $(grep -qE 'PATH.*/snap/bin' /etc/environment);then sed -i -r '1s|\x22$|\x3a/snap/bin&|g' /etc/environment;fi
  - echo "EDITOR=/usr/bin/vim.basic"|tee 1>/dev/null -a /etc/environment
  - . /etc/environment
  - if [ -f /usr/local/bin/petname-helper.sh ];then /usr/local/bin/petname-helper.sh;fi
  - if [ -f /home/ubuntu/.ssh/id_rsa ];then cat /home/ubuntu/.ssh/id_rsa.pub|tee 1>/dev/null -a /home/ubuntu/.ssh/authorized_keys;fi
  - if [ -f /etc/systemd/system/show-me-files.service ];then systemctl daemon-reload;for S in enable start start status;do systemctl $S show-me-files.service;sleep .5;done;fi
  - if [ -f /etc/ssl/certs/show-me_ca.crt ];then cp -a /etc/ssl/certs/show-me_ca.crt /opt/show-me/show-me_ca.crt;fi
  - if [ -f /etc/ssl/certs/show-me_host.pem ];then cp -a /etc/ssl/certs/show-me_host.pem /opt/show-me/;fi
  - if [ -f /etc/ssl/certs/show-me_ca.crt -a -d /etc/show-me/www ];then cp /etc/ssl/certs/show-me_ca.crt /etc/show-me/www/show-me_ca.crt;fi
  - if [ -f /opt/show-me/show-me_host.pem -a -d /etc/show-me/www ];then cp /etc/ssl/certs/show-me_host.pem /etc/show-me/www/;fi
  ###################################
  #### Begin App Specific config ####
  ###################################
  # Get Postgresql Version
  - export PGVER=$(psql -V|awk '{gsub(/\..*$/,"");print $3}')
  #
  ######################################################
  #### PostgreSQL Config for MAAS, Candid, and RBAC ####
  ######################################################
  #
  # PostgreSQL setup for Candid
  - export CANDID_DBVER=$(psql -V|awk '{gsub(/\..*$/,"");print $3}')
  - export CANDID_DBHBA="/etc/postgresql/${CANDID_DBVER}/main/pg_hba.conf"
  - export CANDID_DBHOST=localhost
  - export CANDID_DBUSER=candid
  - export CANDID_DBNAME='candiddb'
  - export CANDID_DBPORT=5432
  - export CANDID_DBPASS="$(env LANG=C LC_ALL=C tr 2>/dev/null -dc "[:alnum:]" < /dev/urandom|fold -w12|head -n1)"
  - export CANDID_DBCON="postgres://${CANDID_DBUSER}:${CANDID_DBPASS}@${CANDID_DBHOST}:${CANDID_DBPORT}/${CANDID_DBNAME}"
  - su - postgres -c 'psql -c "CREATE ROLE '${CANDID_DBUSER}' WITH SUPERUSER CREATEDB CREATEROLE LOGIN REPLICATION ENCRYPTED PASSWORD '"'"''${CANDID_DBPASS}''"'"';"'
  - su - postgres -c 'psql -c "CREATE DATABASE '${CANDID_DBNAME}' WITH OWNER '"'"''${CANDID_DBUSER}''"'"';"'
  - echo "${CANDID_DBHOST}:${CANDID_DBPORT}:${CANDID_DBNAME}:${CANDID_DBUSER}:${CANDID_DBPASS}"|su postgres -c 'tee 1>/dev/null /var/lib/postgresql/.pgpass.candid'
  - chmod 0600 /var/lib/postgresql/.pgpass.candid
  - chown postgres:postgres /var/lib/postgresql/.pgpass.candid
  # PostgreSQL setup for RBAC
  - export RBAC_DBVER=$(psql -V|awk '{gsub(/\..*$/,"");print $3}')
  - export RBAC_DBHBA="/etc/postgresql/${RBAC_DBVER}/main/pg_hba.conf"
  - export RBAC_DBHOST=localhost
  - export RBAC_DBUSER=rbac
  - export RBAC_DBNAME='rbacdb'
  - export RBAC_DBPORT=5432
  - export RBAC_DBPASS="$(env LANG=C LC_ALL=C tr 2>/dev/null -dc "[:alnum:]" < /dev/urandom|fold -w12|head -n1)"
  - export RBAC_DBCON="postgres://${RBAC_DBUSER}:${RBAC_DBPASS}@${RBAC_DBHOST}:${RBAC_DBPORT}/${RBAC_DBNAME}"
  - su - postgres -c 'psql -c "CREATE ROLE '${RBAC_DBUSER}' WITH SUPERUSER CREATEDB CREATEROLE LOGIN REPLICATION ENCRYPTED PASSWORD '"'"''${RBAC_DBPASS}''"'"';"'
  - su - postgres -c 'psql -c "CREATE DATABASE '${RBAC_DBNAME}' WITH OWNER '"'"''${RBAC_DBUSER}''"'"';"'
  - echo "${RBAC_DBHOST}:${RBAC_DBPORT}:${RBAC_DBNAME}:${RBAC_DBUSER}:${RBAC_DBPASS}"|su postgres -c 'tee 1>/dev/null /var/lib/postgresql/.pgpass.rbac'
  - chmod 0600 /var/lib/postgresql/.pgpass.rbac
  - chown postgres:postgres /var/lib/postgresql/.pgpass.rbac
  # PostgreSQL setup for MAAS
  - export MAAS_DBVER=$(psql -V|awk '{gsub(/\..*$/,"");print $3}')
  - export MAAS_DBHBA="/etc/postgresql/${MAAS_DBVER}/main/pg_hba.conf"
  - export MAAS_DBHOST=localhost
  - export MAAS_DBUSER=maas
  - export MAAS_DBNAME='maasdb'
  - export MAAS_DBPORT=5432
  - export MAAS_DBPASS="$(env LANG=C LC_ALL=C tr 2>/dev/null -dc "[:alnum:]" < /dev/urandom|fold -w12|head -n1)"
  - export MAAS_DBCON="postgres://${MAAS_DBUSER}:${MAAS_DBPASS}@${MAAS_DBHOST}:${MAAS_DBPORT}/${MAAS_DBNAME}"
  - su - postgres -c 'psql -c "CREATE ROLE '${MAAS_DBUSER}' WITH SUPERUSER CREATEDB CREATEROLE LOGIN REPLICATION ENCRYPTED PASSWORD '"'"''${MAAS_DBPASS}''"'"';"'
  - su - postgres -c 'psql -c "CREATE DATABASE '${MAAS_DBNAME}' WITH OWNER '"'"''${MAAS_DBUSER}''"'"';"'
  - echo "${MAAS_DBHOST}:${MAAS_DBPORT}:${MAAS_DBNAME}:${MAAS_DBUSER}:${MAAS_DBPASS}"|su postgres -c 'tee 1>/dev/null /var/lib/postgresql/.pgpass.maas'
  - chmod 0600 /var/lib/postgresql/.pgpass.maas
  - chown postgres:postgres /var/lib/postgresql/.pgpass.maas
  # Write pg_hba.conf with all local IP addresses
  - (hostname -I|sed 's/[0-9]\s/&\n/g'|sed '/      $/d')|awk '!/127/{gsub(/\/.*$/,"",$4);printf "%-08s%-016s%-016s%-024s%s\n","host","all","all",$1"/32","md5"}'|tee -a 1>/dev/null /etc/postgresql/$(psql -V|awk -F'[ .]' '{print $3}')/main/pg_hba.conf
  # PostgreSQL System Tuning
  - su - postgres -c 'psql postgres -c "ALTER SYSTEM SET listen_addresses TO '"'"'*'"'"';"'
  - su - postgres -c 'psql postgres -c "ALTER SYSTEM SET max_connections TO '"'"'500'"'"';"'
  - su - postgres -c 'psql postgres -c "ALTER SYSTEM SET max_prepared_transactions TO '"'"'500'"'"';"'
  - su - postgres -c 'psql postgres -c "ALTER SYSTEM SET shared_buffers = \"2GB\";"'
  - su - postgres -c 'psql postgres -c "ALTER SYSTEM SET effective_cache_size = \"6GB\";"'
  - su - postgres -c 'psql postgres -c "ALTER SYSTEM SET maintenance_work_mem = \"512MB\";"'
  - su - postgres -c 'psql postgres -c "ALTER SYSTEM SET checkpoint_completion_target = 0.9;"'
  - su - postgres -c 'psql postgres -c "ALTER SYSTEM SET wal_buffers = \"16MB\";"'
  - su - postgres -c 'psql postgres -c "ALTER SYSTEM SET default_statistics_target = 100;"'
  - su - postgres -c 'psql postgres -c "ALTER SYSTEM SET random_page_cost = 1.1;"'
  - su - postgres -c 'psql postgres -c "ALTER SYSTEM SET effective_io_concurrency = 200;"'
  - su - postgres -c 'psql postgres -c "ALTER SYSTEM SET work_mem = \"2621kB\";"'
  - su - postgres -c 'psql postgres -c "ALTER SYSTEM SET min_wal_size = \"1GB\";"'
  - su - postgres -c 'psql postgres -c "ALTER SYSTEM SET max_wal_size = \"4GB\";"'
  - su - postgres -c 'psql postgres -c "ALTER SYSTEM SET max_worker_processes = 4;"'
  - su - postgres -c 'psql postgres -c "ALTER SYSTEM SET max_parallel_workers_per_gather = 2;"'
  - su - postgres -c 'psql postgres -c "ALTER SYSTEM SET max_parallel_workers = 4;"'
  - su - postgres -c 'psql postgres -c "ALTER SYSTEM SET max_parallel_maintenance_workers = 2;"'
  # Restart postgres cluster
  - pg_ctlcluster $(psql -V|awk -F'[ .]' '{print $3}') main restart
  # Create cloud-init-psql.rc file for all users who can login
  - for x in $(awk -F":" '!/root|postgres/&&/sh$/{if ($NF ~ /sh$/) print $6","$3;next}' /etc/passwd);do export H=${x%%,*} I=${x##*,};export U=${H##*/};if ! $(test -f ${H}/cloud-init-psql.rc);then (for x in CANDID MAAS RBAC;do for y in DBCON DBHBA DBHOST DBNAME DBPASS DBPORT DBUSER DBVER;do eval printf 'export\ %s=\'"'"'%s%s%s\'"'"'\\n' ${x}_${y} \$\{${x}_${y}\};done;done)|su - $(id -un ${I}) -c 'tee 1>/dev/null '${H}'/cloud-init-psql.rc';fi;done
  - apt install maas-common maas-client -yqf --auto-remove --purge
  - apt install maas-region-controller -yqf --auto-remove --purge
  - if [ -f /etc/lynx/lynx.cfg ];then sed -i -r "s/^#?(FORCE_SSL_COOKIE.*:|SET_COOKIE.*:|ACCEPT_ALL_COOKIE.*:)[^$]*/\1TRUE/;s/^#?(COOKIE_LOOSE_INVALID_DOMAINS:)[^$]*/\1$(hostname -I|sed -r 's/\x20/\n/g'|sed -r '/:|^$/d;1s/^/'$(hostname -d)'\n/g'|paste -sd,)/;s/^#?(FORCE_COOKIE_PROMPT.*:|FORCE_SSL_PROMPT.*:)[^$]*/\1yes/;s/^#?(COOKIE_.*FILE:.*$)/\1/" /etc/lynx/lynx.cfg;fi
  #- if [ -f /home/$(id -un 1000)/maas.lynx ];then lynx -cmd_script=/home/$(id -un 1000)/maas.lynx https://$(hostname -f);fi
  - if [ -f /usr/local/bin/show-me-maas_lxd-preseed.sh ];then /usr/local/bin/show-me-maas_lxd-preseed.sh;fi
  - "curl -fSlL -o /opt/show-me/packer_1.8.0_linux_amd64.zip https://releases.hashicorp.com/packer/1.8.0/packer_1.8.0_linux_amd64.zip"
  - "if [ -f /opt/show-me/packer_1.8.0_linux_amd64.zip ];then unzip -qq -d /usr/local/bin /opt/show-me/packer_1.8.0_linux_amd64.zip;fi"
  - "su - $(id -un 1000) -c 'git clone https://github.com/canonical/packer-maas'"